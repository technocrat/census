# Calculate nation-level dependency ratios
nation_deps = DataFrame(Nation = String[], Dependency_Ratio = Float64[])

for (i, nation_df) in enumerate(age_dfs)
    nation_name = Titles[i]
    # Get population weights for states in this nation
    nation_states = nations[i]
    
    # Filter state_pop for states in this nation and calculate total population
    nation_state_pops = filter(row -> row.stusps in nation_states, state_pop)
    total_pop = sum(nation_state_pops.total)
    
    # Calculate weights based on state populations
    weights = nation_state_pops.total ./ total_pop
    
    # Calculate weighted average dependency ratio
    weighted_ratio = sum(nation_df.dependency_ratio .* weights)
    # Round to 2 decimal places for readability
    weighted_ratio = round(weighted_ratio, digits=2)
    
    # Add to results DataFrame
    push!(nation_deps, (Nation = nation_name, Dependency_Ratio = weighted_ratio))
end

# Sort by nation name for consistency
sort!(nation_deps, :Nation)

# Convert dependency ratios to strings with % signs
transform!(nation_deps, :Dependency_Ratio => ByRow(x -> string(x) * "%") => :Dependency_Ratio)

# Add Texas totals
tx = filter(row -> row.stusps == "TX", df)
tx_pops = combine(groupby(tx, :stusps), :pop => sum)
tx_total_pop = sum(tx_pops.total)
tx_weights = tx_pops.total ./ tx_total_pop

# Calculate weighted average dependency ratio for Texas
tx_ratio = sum(nation_df.dependency_ratio .* tx_weights)
tx_ratio = round(tx_ratio, digits=2)
push!(nation_deps, (Nation = "Texas", Dependency_Ratio = tx_ratio))

# Create totals row for tx DataFrame
total_pop = sum(tx.Population)
total_hs = sum(tx.Pop_w_HS)
total_ba = sum(tx.Pop_w_BA)
total_grad = sum(tx.Pop_w_GRAD)

# Calculate weighted averages for percentages
hs_pct = round(100 * total_hs / total_pop, digits=2)
ba_pct = round(100 * total_ba / total_pop, digits=2)
grad_pct = round(100 * total_grad / total_pop, digits=2)

# Create the totals row
total_row = DataFrame(
    State = "Total",
    Population = total_pop,
    Pop_w_HS = total_hs,
    HS_pct = hs_pct,
    Pop_w_BA = total_ba,
    BA_pct = ba_pct,
    Pop_w_GRAD = total_grad,
    GRAD_pct = grad_pct
)

# Create a blank row
blank_row = DataFrame(
    State = "",
    Population = 0,
    Pop_w_HS = 0,
    HS_pct = 0,
    Pop_w_BA = 0,
    BA_pct = 0,
    Pop_w_GRAD = 0,
    GRAD_pct = 0
)

# Append the blank row and totals row to the original DataFrame
tx = vcat(tx, blank_row, total_row)