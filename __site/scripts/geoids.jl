"""
Module for handling geographic ID constants and queries.
"""

using LibPQ
using DataFrames
using ArchGDAL
using Census

# Database connection parameters
const DB_HOST = "localhost"
const DB_PORT = 5432
const DB_NAME = "geocoder"

# Notable Geographic IDs
const OSAGE_COUNTY_KS = "20167"  # Used as reference for Southern Kansas
const LOS_ANGELES_COUNTY = "06037"

# Longitude boundaries for regions
const WESTERN_BOUNDARY = -115.0
const EASTERN_BOUNDARY = -90.0
const CONTINENTAL_DIVIDE = -109.5
const SLOPE_WEST = -120.0
const SLOPE_EAST = -115.0
const UTAH_BORDER = -109.0
const CENTRAL_MERIDIAN = -100.0

"""
    get_db_connection() -> LibPQ.Connection

Creates a connection to the PostgreSQL database using default parameters.
"""
function get_db_connection()
    conn = LibPQ.Connection("host=$DB_HOST port=$DB_PORT dbname=$DB_NAME")
    return conn
end

"""
    get_western_geoids() -> DataFrame

Returns GEOIDs for counties west of 100°W longitude and east of 115°W longitude.
"""
function get_western_geoids()
    conn = get_db_connection()
    query = """
    SELECT geoid, name, stusps, ST_X(ST_Centroid(geom)) as lon
    FROM counties
    WHERE ST_X(ST_Centroid(geom)) < $WESTERN_BOUNDARY
    ORDER BY lon;
    """
    df = DataFrame(LibPQ.load!(DataFrame, conn, query))
    close(conn)
    return df
end

"""
    get_eastern_geoids() -> DataFrame

Returns GEOIDs for counties between 90°W and 100°W longitude.
"""
function get_eastern_geoids()
    conn = get_db_connection()
    query = """
    SELECT geoid, name, stusps, ST_X(ST_Centroid(geom)) as lon
    FROM counties
    WHERE ST_X(ST_Centroid(geom)) > $EASTERN_BOUNDARY
    ORDER BY lon;
    """
    df = DataFrame(LibPQ.load!(DataFrame, conn, query))
    close(conn)
    return df
end

"""
    get_east_of_utah_geoids() -> DataFrame

Returns GEOIDs for counties east of Utah's border (109°W longitude).
"""
function get_east_of_utah_geoids()
    conn = get_db_connection()
    query = """
    SELECT geoid, name, stusps, ST_X(ST_Centroid(geom)) as lon
    FROM counties
    WHERE ST_X(ST_Centroid(geom)) > $UTAH_BORDER
    ORDER BY lon;
    """
    df = DataFrame(LibPQ.load!(DataFrame, conn, query))
    close(conn)
    return df
end

"""
    get_slope_geoids() -> DataFrame

Returns GEOIDs for counties between 115°W and 120°W longitude.
"""
function get_slope_geoids()
    conn = get_db_connection()
    query = """
    SELECT geoid, name, stusps, ST_X(ST_Centroid(geom)) as lon
    FROM counties
    WHERE ST_X(ST_Centroid(geom)) BETWEEN $SLOPE_WEST AND $SLOPE_EAST
    ORDER BY lon;
    """
    df = DataFrame(LibPQ.load!(DataFrame, conn, query))
    close(conn)
    return df
end

"""
    get_southern_kansas_geoids() -> DataFrame

Returns GEOIDs for Kansas counties south of Osage County.
"""
function get_southern_kansas_geoids()
    conn = get_db_connection()
    query = """
    WITH osage AS (
        SELECT geom FROM counties WHERE geoid = '$OSAGE_COUNTY_KS'
    )
    SELECT c.geoid, c.name, c.stusps
    FROM counties c, osage o
    WHERE c.stusps = 'KS'
    AND ST_DWithin(c.geom, o.geom, 100000)
    ORDER BY ST_Distance(c.geom, o.geom);
    """
    df = DataFrame(LibPQ.load!(DataFrame, conn, query))
    close(conn)
    return df
end

"""
    get_colorado_basin_geoids() -> DataFrame

Returns GEOIDs for counties within the Colorado River Basin.
"""
"""
    get_colorado_basin_geoids() -> Vector{String}

Extracts GEOID values from the Colorado River Basin county boundaries shapefile.
Returns a vector of GEOID strings.
"""
function get_colorado_basin_geoids()
    shapefile_path = joinpath(dirname(dirname(@__DIR__)), "data", "Colorado_River_Basin_County_Boundaries")
    
    # Read the shapefile
    dataset = ArchGDAL.read(shapefile_path)
    
    # Extract GEOIDs from the feature layer
    layer = ArchGDAL.getlayer(dataset, 0)
    geoids = String[]
    
    for feature in layer
        # Assuming GEOID is a field in the shapefile
        # You might need to adjust the field name if it's different
        geoid = ArchGDAL.getfield(feature, "GEOID")
        push!(geoids, geoid)
    end
    
    ArchGDAL.destroy(dataset)
    sort(unique(geoids))
end


export get_western_geoids,
       get_eastern_geoids,
       get_east_of_utah_geoids,
       get_slope_geoids,
       get_southern_kansas_geoids,
       get_colorado_basin_geoids 


ms_basin_ar = ["05001", "05003", "05017", "05021", "05031",
    "05035", "05037", "05041", "05055", "05067",
    "05069", "05075", "05077", "05079", "05093",
    "05095", "05107", "05111", "05117", "05121",
    "05123", "05147"]

ms_basin_la = ["22035", "22065", "22107", "22029", "22077",
    "22125", "22037", "22033", "22121", "22047", "22005",
    "22093", "22095", "22089", "22051", "22071", "22087",
    "22075", "22125", "22091", "22058", "22117", "22033", "22063",
    "22103", "22093", "22095", "22029", "22051", "22075",
    "22087", "22037", "22105", "22051", "22071", "22089",
    "22093"]

socal = ["06079", "06029", "06071", "06111", "06037",
    "06059", "06065", "06073", "06025", "06083"]

necal = ["06036", "06023", "06089", "06035", "06027",
    "06045", "06103", "06121", "06007", "06063",
    "06033", "06011", "06101", "06115", "06091",
    "06057", "06103", "06051", "06003", "06061",
    "41011", "41015", "41033", "41019", "41029",
    "41035", "06021", "06105", "41037", "65015",
    "06093", "06049", "06015"]


eastern_geoids = ["05001", "05003", "05005", "05007", "05009",
    "05011", "05013", "05015", "05017", "05019",
    "05021", "05023", "05025", "05027", "05029",
    "05031", "05033", "05035", "05037", "05039",
    "05041", "05043", "05045", "05047", "05049",
    "05051", "05053", "05055", "05057", "05059",
    "05061", "05063", "05065", "05067", "05069",
    "05071", "05073", "05075", "05077", "05079",
    "05081", "05083", "05085", "05087", "05089",
    "05091", "05093", "05095", "05097", "05099",
    "05101", "05103", "05105", "05107", "05109",
    "05111", "05113", "05115", "05117", "05119",
    "05121", "05123", "05125", "05127", "05129",
    "05131", "05133", "05135", "05137", "05139",
    "05141", "05143", "05145", "05147", "05149",
    "17001", "17009", "17013", "17017", "17057",
    "17061", "17067", "17071", "17073", "17083",
    "17085", "17095", "17109", "17131", "17133",
    "17137", "17149", "17161", "17169", "17171",
    "17187", "19001", "19003", "19005", "19007",
    "19009", "19011", "19013", "19015", "19017",
    "19019", "19021", "19023", "19025", "19027",
    "19029", "19031", "19033", "19035", "19037",
    "19039", "19041", "19043", "19045", "19047",
    "19049", "19051", "19053", "19055", "19057",
    "19059", "19061", "19063", "19065", "19067",
    "19069", "19071", "19073", "19075", "19077",
    "19079", "19081", "19083", "19085", "19087",
    "19089", "19091", "19093", "19095", "19097",
    "19099", "19101", "19103", "19105", "19107",
    "19109", "19111", "19113", "19115", "19117",
    "19119", "19121", "19123", "19125", "19127",
    "19129", "19131", "19133", "19135", "19137",
    "19139", "19141", "19143", "19145", "19147",
    "19149", "19151", "19153", "19155", "19157",
    "19159", "19161", "19163", "19165", "19167",
    "19169", "19171", "19173", "19175", "19177",
    "19179", "19181", "19183", "19185", "19187",
    "19189", "19191", "19193", "19195", "19197",
    "20001", "20003", "20005", "20007", "20009",
    "20011", "20013", "20015", "20017", "20019",
    "20021", "20025", "20027", "20029", "20031",
    "20033", "20035", "20037", "20041", "20043",
    "20045", "20047", "20049", "20051", "20053",
    "20057", "20059", "20061", "20065", "20073",
    "20077", "20079", "20083", "20085", "20087",
    "20089", "20091", "20095", "20097", "20099",
    "20103", "20105", "20107", "20111", "20113",
    "20115", "20117", "20121", "20123", "20125",
    "20127", "20131", "20133", "20135", "20137",
    "20139", "20141", "20143", "20145", "20147",
    "20149", "20151", "20155", "20157", "20159",
    "20161", "20163", "20165", "20167", "20169",
    "20173", "20177", "20183", "20185", "20191",
    "20195", "20197", "20201", "20205", "20207",
    "20209", "22001", "22003", "22005", "22007",
    "22009", "22011", "22013", "22015", "22017",
    "22019", "22021", "22023", "22025", "22027",
    "22029", "22031", "22033", "22035", "22037",
    "22039", "22041", "22043", "22045", "22047",
    "22049", "22051", "22053", "22055", "22057",
    "22059", "22061", "22065", "22067",
    "22069", "22073", "22077", "22079", "22081",
    "22083", "22085", "22089", "22093",
    "22095", "22097", "22099", "22101",
    "22107", "22109", "22111", "22113", "22115",
    "22119", "22121", "22123", "22125",
    "22127", "27001", "27003", "27005", "27007",
    "27009", "27011", "27013", "27015", "27017",
    "27019", "27021", "27023", "27025", "27027",
    "27029", "27031", "27033", "27035", "27037",
    "27039", "27041", "27043", "27045", "27047",
    "27049", "27051", "27053", "27055", "27057",
    "27059", "27061", "27063", "27065", "27067",
    "27069", "27071", "27073", "27075", "27077",
    "27079", "27081", "27083", "27085", "27087",
    "27089", "27091", "27093", "27095", "27097",
    "27099", "27101", "27103", "27105", "27107",
    "27109", "27111", "27113", "27115", "27117",
    "27119", "27121", "27123", "27125", "27127",
    "27129", "27131", "27133", "27135", "27137",
    "27139", "27141", "27143", "27145", "27147",
    "27149", "27151", "27153", "27155", "27157",
    "27159", "27161", "27163", "27165", "27167",
    "27169", "27171", "27173", "28001", "28005",
    "28011", "28021", "28027", "28029", "28037",
    "28049", "28051", "28053", "28055", "28063",
    "28077", "28083", "28085", "28089", "28113",
    "28119", "28125", "28133", "28135", "28143",
    "28147", "28149", "28151", "28157", "28163",
    "29001", "29003", "29005", "29007", "29009",
    "29011", "29013", "29015", "29017", "29019",
    "29021", "29023", "29025", "29027", "29029",
    "29033", "29035", "29037", "29039", "29041",
    "29043", "29045", "29047", "29049", "29051",
    "29053", "29055", "29057", "29059", "29061",
    "29063", "29065", "29067", "29069", "29071",
    "29073", "29075", "29077", "29079", "29081",
    "29083", "29085", "29087", "29089", "29091",
    "29093", "29095", "29097", "29099", "29101",
    "29103", "29105", "29107", "29109", "29111",
    "29113", "29115", "29117", "29119", "29121",
    "29123", "29125", "29127", "29129", "29131",
    "29135", "29137", "29139", "29141", "29145",
    "29147", "29149", "29151", "29153", "29159",
    "29161", "29163", "29165", "29167", "29169",
    "29171", "29173", "29175", "29177", "29179",
    "29181", "29183", "29185", "29186", "29187",
    "29189", "29195", "29197", "29199", "29203",
    "29205", "29209", "29211", "29213", "29215",
    "29217", "29219", "29221", "29223", "29225",
    "29227", "29229", "29510", "31001", "31003",
    "31009", "31011", "31015", "31017", "31019",
    "31021", "31023", "31025", "31027", "31035",
    "31037", "31039", "31041", "31043", "31047",
    "31051", "31053", "31055", "31059", "31061",
    "31065", "31067", "31071", "31073", "31077",
    "31079", "31081", "31083", "31089", "31093",
    "31095", "31097", "31099", "31103", "31107",
    "31109", "31115", "31119", "31121", "31125",
    "31127", "31129", "31131", "31133", "31137",
    "31139", "31141", "31143", "31147", "31149",
    "31151", "31153", "31155", "31159", "31163",
    "31167", "31169", "31173", "31175", "31177",
    "31179", "31181", "31183", "31185", "38003",
    "38005", "38017", "38019", "38021", "38027",
    "38031", "38035", "38039", "38043", "38045",
    "38047", "38051", "38063", "38067", "38069",
    "38071", "38073", "38077", "38079", "38081",
    "38091", "38093", "38095", "38097", "38099",
    "38103", "40001", "40003", "40005", "40009",
    "40011", "40013", "40015", "40017", "40019",
    "40021", "40023", "40027", "40029", "40031",
    "40033", "40035", "40037", "40039", "40041",
    "40043", "40045", "40047", "40049", "40051",
    "40053", "40055", "40057", "40059", "40061",
    "40063", "40065", "40067", "40069", "40071",
    "40073", "40075", "40077", "40079", "40081",
    "40083", "40085", "40087", "40089", "40091",
    "40093", "40095", "40097", "40099", "40101",
    "40103", "40105", "40107", "40109", "40111",
    "40113", "40115", "40117", "40119", "40121",
    "40123", "40125", "40127", "40129", "40131",
    "40133", "40135", "40137", "40141", "40143",
    "40145", "40147", "40149", "40151", "40153",
    "46003", "46005", "46009", "46011", "46013",
    "46015", "46017", "46023", "46025", "46027",
    "46029", "46035", "46037", "46039", "46043",
    "46045", "46049", "46051", "46053", "46057",
    "46059", "46061", "46065", "46067", "46069",
    "46073", "46077", "46079", "46083", "46085",
    "46087", "46089", "46091", "46097", "46099",
    "46101", "46107", "46109", "46111", "46115",
    "46123", "46125", "46127", "46135", "48001",
    "48005", "48007", "48009", "48013", "48015",
    "48019", "48021", "48023", "48025", "48027",
    "48029", "48031", "48035", "48037", "48039",
    "48041", "48047", "48049", "48051", "48053",
    "48055", "48057", "48059", "48061", "48063",
    "48067", "48071", "48073", "48077", "48083",
    "48085", "48089", "48091", "48093", "48095",
    "48097", "48099", "48113", "48119", "48121",
    "48123", "48127", "48131", "48133", "48139",
    "48143", "48145", "48147", "48149", "48155",
    "48157", "48159", "48161", "48163", "48167",
    "48171", "48175", "48177", "48181", "48183",
    "48185", "48187", "48193", "48197", "48199",
    "48201", "48203", "48207", "48209", "48213",
    "48215", "48217", "48221", "48223", "48225",
    "48231", "48237", "48239", "48241", "48245",
    "48247", "48249", "48251", "48253", "48255",
    "48257", "48259", "48261", "48265", "48267",
    "48273", "48275", "48277", "48281", "48283",
    "48285", "48287", "48289", "48291", "48293",
    "48297", "48299", "48307", "48309", "48311",
    "48313", "48315", "48319", "48321", "48325",
    "48327", "48331", "48333", "48337", "48339",
    "48343", "48347", "48349", "48351", "48355",
    "48361", "48363", "48365", "48367", "48373",
    "48379", "48385", "48387", "48391", "48395",
    "48397", "48399", "48401", "48403", "48405",
    "48407", "48409", "48411", "48417", "48419",
    "48423", "48425", "48427", "48429", "48439",
    "48441", "48447", "48449", "48453", "48455",
    "48457", "48459", "48463", "48467", "48469",
    "48471", "48473", "48477", "48479", "48481",
    "48485", "48487", "48489", "48491", "48493",
    "48497", "48499", "48503", "48505", "48507",
    "55003", "55005", "55007", "55011", "55013",
    "55017", "55019", "55023", "55031", "55033",
    "55035", "55043", "55049", "55051", "55053",
    "55057", "55063", "55065", "55081", "55091",
    "55093", "55095", "55099", "55103", "55107",
    "55109", "55113", "55119", "55121", "55123",
    "55129", "55141"]

south_fl      = ["12075","12083","12107","12035","12127","12117",
"12053","12119","12069","12095","12009","12101",
"12103","12057","12105","12097","12009","12081",
"12115","12097","12061","12049","12093","12061",
"12027","12111","12015","12043","12085","12071",
"12027","12071","12051","12099","12021","12011",
"12087","12086","12055","12017"]

missouri_river_basin = ["30005", "30007", "30013", "30015", "30017",
    "30021", "30027", "30033", "30041", "30045",
    "30049", "30051", "30055", "30059", "30069",
    "30071", "30075", "30079", "30083", "30085",
    "30087", "30091", "30099", "30101", "30105",
    "30109", "38001", "38007", "38011", "38013",
    "38015", "38023", "38025", "38029", "38033",
    "38037", "38041", "38053", "38055", "38057",
    "38059", "38061", "38065", "38085", "38087",
    "38089", "38101", "38105", "46003", "46005",
    "46007", "46009", "46011", "46013", "46015",
    "46017", "46019", "46021", "46023", "46025",
    "46029", "46031", "46033", "46035", "46037",
    "19001", "19003", "31001", "29003", "31003",
    "31005", "29005", "19009", "31007", "27011",
    "31009", "31011", "31013", "31015", "31017",
    "29021", "31019", "31021", "31023", "19027",
    "29033", "19029", "31025", "31027", "29041",
    "31029", "19035", "31031", "31033", "27023",
    "29045", "19039", "31035", "29051", "31037",
    "29053", "19047", "31039", "31041", "31043",
    "19049", "31045", "31047", "31049", "31051",
    "31053", "31055", "31057", "31059", "29071",
    "31061", "19071", "31063", "31065", "31067",
    "31069", "31071", "29073", "31073", "31075",
    "31077", "19073", "19077", "31079", "31081",
    "31083", "19085", "31085", "31087", "29087",
    "31089", "31091", "29089", "31093", "19093",
    "29095", "29099", "31095", "31097", "31099",
    "31101", "31103", "31105", "31107", "27073",
    "31109", "29111", "27081", "29113", "31111",
    "31113", "31115", "31119", "29127", "31117",
    "31121", "19129", "29135", "19133", "19137",
    "29139", "31123", "27101", "31125", "31127",
    "27105", "31129", "29151", "31131", "19145",
    "31133", "31135", "29157", "31137", "31139",
    "29163", "27117", "29165", "31141", "19149",
    "31143", "19155", "29173", "31145", "27127",
    "31147", "19159", "27133", "31149", "19161",
    "29195", "31151", "31153", "31155", "31157",
    "31159", "19165", "31161", "31163", "19167",
    "31165", "29183", "29189", "31167", "27151",
    "19173", "31169", "31171", "31173", "27155",
    "19175", "31175", "29219", "29221", "31177",
    "31179", "31181", "31183", "19193", "27173",
    "31185", "30019"]

rio_basin_tx  = ["48141","48229","48109","48243","48377",
                 "48301","48389","48371","48043","48443",
                 "48465","48105","48103","48475"]
rio_basin_nm  = ["35039","35056","35049","35028","35043",
                 "35001","35053","35013","35051","35061"]
rio_basin_co  = ["08023","08021","08105","08003","08109"]